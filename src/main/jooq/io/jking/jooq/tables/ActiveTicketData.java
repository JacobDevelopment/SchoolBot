/*
 * This file is generated by jOOQ.
 */
package io.jking.jooq.tables;


import io.jking.jooq.Keys;
import io.jking.jooq.Public;
import io.jking.jooq.tables.records.ActiveTicketDataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActiveTicketData extends TableImpl<ActiveTicketDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.active_ticket_data</code>
     */
    public static final ActiveTicketData ACTIVE_TICKET_DATA = new ActiveTicketData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActiveTicketDataRecord> getRecordType() {
        return ActiveTicketDataRecord.class;
    }

    /**
     * The column <code>public.active_ticket_data.channel_id</code>.
     */
    public final TableField<ActiveTicketDataRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.active_ticket_data.guild_id</code>.
     */
    public final TableField<ActiveTicketDataRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.active_ticket_data.creator_id</code>.
     */
    public final TableField<ActiveTicketDataRecord, Long> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.active_ticket_data.allow_transcript</code>.
     */
    public final TableField<ActiveTicketDataRecord, Boolean> ALLOW_TRANSCRIPT = createField(DSL.name("allow_transcript"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    private ActiveTicketData(Name alias, Table<ActiveTicketDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActiveTicketData(Name alias, Table<ActiveTicketDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.active_ticket_data</code> table reference
     */
    public ActiveTicketData(String alias) {
        this(DSL.name(alias), ACTIVE_TICKET_DATA);
    }

    /**
     * Create an aliased <code>public.active_ticket_data</code> table reference
     */
    public ActiveTicketData(Name alias) {
        this(alias, ACTIVE_TICKET_DATA);
    }

    /**
     * Create a <code>public.active_ticket_data</code> table reference
     */
    public ActiveTicketData() {
        this(DSL.name("active_ticket_data"), null);
    }

    public <O extends Record> ActiveTicketData(Table<O> child, ForeignKey<O, ActiveTicketDataRecord> key) {
        super(child, key, ACTIVE_TICKET_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActiveTicketDataRecord> getPrimaryKey() {
        return Keys.ACTIVE_TICKET_DATA_PKEY;
    }

    @Override
    public ActiveTicketData as(String alias) {
        return new ActiveTicketData(DSL.name(alias), this);
    }

    @Override
    public ActiveTicketData as(Name alias) {
        return new ActiveTicketData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActiveTicketData rename(String name) {
        return new ActiveTicketData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActiveTicketData rename(Name name) {
        return new ActiveTicketData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
