/*
 * This file is generated by jOOQ.
 */
package io.jking.jooq.tables;


import io.jking.jooq.Keys;
import io.jking.jooq.Public;
import io.jking.jooq.tables.records.TicketDataRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketData extends TableImpl<TicketDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ticket_data</code>
     */
    public static final TicketData TICKET_DATA = new TicketData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketDataRecord> getRecordType() {
        return TicketDataRecord.class;
    }

    /**
     * The column <code>public.ticket_data.channel_id</code>.
     */
    public final TableField<TicketDataRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ticket_data.guild_id</code>.
     */
    public final TableField<TicketDataRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ticket_data.creator_id</code>.
     */
    public final TableField<TicketDataRecord, Long> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ticket_data.creation</code>.
     */
    public final TableField<TicketDataRecord, LocalDateTime> CREATION = createField(DSL.name("creation"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.ticket_data.expiry</code>.
     */
    public final TableField<TicketDataRecord, LocalDateTime> EXPIRY = createField(DSL.name("expiry"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("(CURRENT_TIMESTAMP + '48:00:00'::interval)", SQLDataType.LOCALDATETIME)), this, "");

    private TicketData(Name alias, Table<TicketDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private TicketData(Name alias, Table<TicketDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ticket_data</code> table reference
     */
    public TicketData(String alias) {
        this(DSL.name(alias), TICKET_DATA);
    }

    /**
     * Create an aliased <code>public.ticket_data</code> table reference
     */
    public TicketData(Name alias) {
        this(alias, TICKET_DATA);
    }

    /**
     * Create a <code>public.ticket_data</code> table reference
     */
    public TicketData() {
        this(DSL.name("ticket_data"), null);
    }

    public <O extends Record> TicketData(Table<O> child, ForeignKey<O, TicketDataRecord> key) {
        super(child, key, TICKET_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TicketDataRecord> getPrimaryKey() {
        return Keys.TICKET_DATA_PKEY;
    }

    @Override
    public List<ForeignKey<TicketDataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TICKET_DATA__TICKET_DATA_GUILD_ID_FKEY);
    }

    private transient GuildData _guildData;

    public GuildData guildData() {
        if (_guildData == null)
            _guildData = new GuildData(this, Keys.TICKET_DATA__TICKET_DATA_GUILD_ID_FKEY);

        return _guildData;
    }

    @Override
    public TicketData as(String alias) {
        return new TicketData(DSL.name(alias), this);
    }

    @Override
    public TicketData as(Name alias) {
        return new TicketData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketData rename(String name) {
        return new TicketData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketData rename(Name name) {
        return new TicketData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
