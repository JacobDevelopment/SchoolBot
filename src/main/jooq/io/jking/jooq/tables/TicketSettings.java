/*
 * This file is generated by jOOQ.
 */
package io.jking.jooq.tables;


import io.jking.jooq.Keys;
import io.jking.jooq.Public;
import io.jking.jooq.tables.records.TicketSettingsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketSettings extends TableImpl<TicketSettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ticket_settings</code>
     */
    public static final TicketSettings TICKET_SETTINGS = new TicketSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketSettingsRecord> getRecordType() {
        return TicketSettingsRecord.class;
    }

    /**
     * The column <code>public.ticket_settings.guild_id</code>.
     */
    public final TableField<TicketSettingsRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ticket_settings.category_id</code>.
     */
    public final TableField<TicketSettingsRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.ticket_settings.ticket_channel_id</code>.
     */
    public final TableField<TicketSettingsRecord, Long> TICKET_CHANNEL_ID = createField(DSL.name("ticket_channel_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.ticket_settings.ticket_support_role_id</code>.
     */
    public final TableField<TicketSettingsRecord, Long> TICKET_SUPPORT_ROLE_ID = createField(DSL.name("ticket_support_role_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    private TicketSettings(Name alias, Table<TicketSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TicketSettings(Name alias, Table<TicketSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ticket_settings</code> table reference
     */
    public TicketSettings(String alias) {
        this(DSL.name(alias), TICKET_SETTINGS);
    }

    /**
     * Create an aliased <code>public.ticket_settings</code> table reference
     */
    public TicketSettings(Name alias) {
        this(alias, TICKET_SETTINGS);
    }

    /**
     * Create a <code>public.ticket_settings</code> table reference
     */
    public TicketSettings() {
        this(DSL.name("ticket_settings"), null);
    }

    public <O extends Record> TicketSettings(Table<O> child, ForeignKey<O, TicketSettingsRecord> key) {
        super(child, key, TICKET_SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TicketSettingsRecord> getPrimaryKey() {
        return Keys.TICKET_SETTINGS_PKEY;
    }

    @Override
    public List<ForeignKey<TicketSettingsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TICKET_SETTINGS__TICKET_SETTINGS_GUILD_ID_FKEY);
    }

    private transient GuildData _guildData;

    public GuildData guildData() {
        if (_guildData == null)
            _guildData = new GuildData(this, Keys.TICKET_SETTINGS__TICKET_SETTINGS_GUILD_ID_FKEY);

        return _guildData;
    }

    @Override
    public TicketSettings as(String alias) {
        return new TicketSettings(DSL.name(alias), this);
    }

    @Override
    public TicketSettings as(Name alias) {
        return new TicketSettings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketSettings rename(String name) {
        return new TicketSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketSettings rename(Name name) {
        return new TicketSettings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
