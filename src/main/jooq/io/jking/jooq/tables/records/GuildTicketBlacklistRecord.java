/*
 * This file is generated by jOOQ.
 */
package io.jking.jooq.tables.records;


import io.jking.jooq.tables.GuildTicketBlacklist;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GuildTicketBlacklistRecord extends UpdatableRecordImpl<GuildTicketBlacklistRecord> implements Record2<Long, Long[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.guild_ticket_blacklist.guild_id</code>.
     */
    public GuildTicketBlacklistRecord setGuildId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.guild_ticket_blacklist.guild_id</code>.
     */
    public Long getGuildId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>public.guild_ticket_blacklist.blacklisted_user_ids</code>.
     */
    public GuildTicketBlacklistRecord setBlacklistedUserIds(Long[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.guild_ticket_blacklist.blacklisted_user_ids</code>.
     */
    public Long[] getBlacklistedUserIds() {
        return (Long[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return GuildTicketBlacklist.GUILD_TICKET_BLACKLIST.GUILD_ID;
    }

    @Override
    public Field<Long[]> field2() {
        return GuildTicketBlacklist.GUILD_TICKET_BLACKLIST.BLACKLISTED_USER_IDS;
    }

    @Override
    public Long component1() {
        return getGuildId();
    }

    @Override
    public Long[] component2() {
        return getBlacklistedUserIds();
    }

    @Override
    public Long value1() {
        return getGuildId();
    }

    @Override
    public Long[] value2() {
        return getBlacklistedUserIds();
    }

    @Override
    public GuildTicketBlacklistRecord value1(Long value) {
        setGuildId(value);
        return this;
    }

    @Override
    public GuildTicketBlacklistRecord value2(Long[] value) {
        setBlacklistedUserIds(value);
        return this;
    }

    @Override
    public GuildTicketBlacklistRecord values(Long value1, Long[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GuildTicketBlacklistRecord
     */
    public GuildTicketBlacklistRecord() {
        super(GuildTicketBlacklist.GUILD_TICKET_BLACKLIST);
    }

    /**
     * Create a detached, initialised GuildTicketBlacklistRecord
     */
    public GuildTicketBlacklistRecord(Long guildId, Long[] blacklistedUserIds) {
        super(GuildTicketBlacklist.GUILD_TICKET_BLACKLIST);

        setGuildId(guildId);
        setBlacklistedUserIds(blacklistedUserIds);
    }

    /**
     * Create a detached, initialised GuildTicketBlacklistRecord
     */
    public GuildTicketBlacklistRecord(io.jking.jooq.tables.pojos.GuildTicketBlacklist value) {
        super(GuildTicketBlacklist.GUILD_TICKET_BLACKLIST);

        if (value != null) {
            setGuildId(value.getGuildId());
            setBlacklistedUserIds(value.getBlacklistedUserIds());
        }
    }
}
