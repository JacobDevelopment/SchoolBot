/*
 * This file is generated by jOOQ.
 */
package io.jking.jooq.tables.records;


import io.jking.jooq.tables.ActiveTicketData;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActiveTicketDataRecord extends UpdatableRecordImpl<ActiveTicketDataRecord> implements Record4<Long, Long, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.active_ticket_data.channel_id</code>.
     */
    public ActiveTicketDataRecord setChannelId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.active_ticket_data.channel_id</code>.
     */
    public Long getChannelId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.active_ticket_data.guild_id</code>.
     */
    public ActiveTicketDataRecord setGuildId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.active_ticket_data.guild_id</code>.
     */
    public Long getGuildId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.active_ticket_data.creator_id</code>.
     */
    public ActiveTicketDataRecord setCreatorId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.active_ticket_data.creator_id</code>.
     */
    public Long getCreatorId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.active_ticket_data.allow_transcript</code>.
     */
    public ActiveTicketDataRecord setAllowTranscript(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.active_ticket_data.allow_transcript</code>.
     */
    public Boolean getAllowTranscript() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Long, Long, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ActiveTicketData.ACTIVE_TICKET_DATA.CHANNEL_ID;
    }

    @Override
    public Field<Long> field2() {
        return ActiveTicketData.ACTIVE_TICKET_DATA.GUILD_ID;
    }

    @Override
    public Field<Long> field3() {
        return ActiveTicketData.ACTIVE_TICKET_DATA.CREATOR_ID;
    }

    @Override
    public Field<Boolean> field4() {
        return ActiveTicketData.ACTIVE_TICKET_DATA.ALLOW_TRANSCRIPT;
    }

    @Override
    public Long component1() {
        return getChannelId();
    }

    @Override
    public Long component2() {
        return getGuildId();
    }

    @Override
    public Long component3() {
        return getCreatorId();
    }

    @Override
    public Boolean component4() {
        return getAllowTranscript();
    }

    @Override
    public Long value1() {
        return getChannelId();
    }

    @Override
    public Long value2() {
        return getGuildId();
    }

    @Override
    public Long value3() {
        return getCreatorId();
    }

    @Override
    public Boolean value4() {
        return getAllowTranscript();
    }

    @Override
    public ActiveTicketDataRecord value1(Long value) {
        setChannelId(value);
        return this;
    }

    @Override
    public ActiveTicketDataRecord value2(Long value) {
        setGuildId(value);
        return this;
    }

    @Override
    public ActiveTicketDataRecord value3(Long value) {
        setCreatorId(value);
        return this;
    }

    @Override
    public ActiveTicketDataRecord value4(Boolean value) {
        setAllowTranscript(value);
        return this;
    }

    @Override
    public ActiveTicketDataRecord values(Long value1, Long value2, Long value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ActiveTicketDataRecord
     */
    public ActiveTicketDataRecord() {
        super(ActiveTicketData.ACTIVE_TICKET_DATA);
    }

    /**
     * Create a detached, initialised ActiveTicketDataRecord
     */
    public ActiveTicketDataRecord(Long channelId, Long guildId, Long creatorId, Boolean allowTranscript) {
        super(ActiveTicketData.ACTIVE_TICKET_DATA);

        setChannelId(channelId);
        setGuildId(guildId);
        setCreatorId(creatorId);
        setAllowTranscript(allowTranscript);
    }

    /**
     * Create a detached, initialised ActiveTicketDataRecord
     */
    public ActiveTicketDataRecord(io.jking.jooq.tables.pojos.ActiveTicketData value) {
        super(ActiveTicketData.ACTIVE_TICKET_DATA);

        if (value != null) {
            setChannelId(value.getChannelId());
            setGuildId(value.getGuildId());
            setCreatorId(value.getCreatorId());
            setAllowTranscript(value.getAllowTranscript());
        }
    }
}
