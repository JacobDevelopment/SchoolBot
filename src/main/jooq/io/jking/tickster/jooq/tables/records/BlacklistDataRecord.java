/*
 * This file is generated by jOOQ.
 */
package io.jking.tickster.jooq.tables.records;


import io.jking.tickster.jooq.tables.BlacklistData;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlacklistDataRecord extends UpdatableRecordImpl<BlacklistDataRecord> implements Record2<Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.blacklist_data.guild_id</code>.
     */
    public BlacklistDataRecord setGuildId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.blacklist_data.guild_id</code>.
     */
    public Long getGuildId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.blacklist_data.reason</code>.
     */
    public BlacklistDataRecord setReason(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.blacklist_data.reason</code>.
     */
    public String getReason() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return BlacklistData.BLACKLIST_DATA.GUILD_ID;
    }

    @Override
    public Field<String> field2() {
        return BlacklistData.BLACKLIST_DATA.REASON;
    }

    @Override
    public Long component1() {
        return getGuildId();
    }

    @Override
    public String component2() {
        return getReason();
    }

    @Override
    public Long value1() {
        return getGuildId();
    }

    @Override
    public String value2() {
        return getReason();
    }

    @Override
    public BlacklistDataRecord value1(Long value) {
        setGuildId(value);
        return this;
    }

    @Override
    public BlacklistDataRecord value2(String value) {
        setReason(value);
        return this;
    }

    @Override
    public BlacklistDataRecord values(Long value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BlacklistDataRecord
     */
    public BlacklistDataRecord() {
        super(BlacklistData.BLACKLIST_DATA);
    }

    /**
     * Create a detached, initialised BlacklistDataRecord
     */
    public BlacklistDataRecord(Long guildId, String reason) {
        super(BlacklistData.BLACKLIST_DATA);

        setGuildId(guildId);
        setReason(reason);
    }
}
