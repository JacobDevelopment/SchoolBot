/*
 * This file is generated by jOOQ.
 */
package io.jking.tickster.jooq.tables;


import io.jking.tickster.jooq.Keys;
import io.jking.tickster.jooq.Public;
import io.jking.tickster.jooq.tables.records.BlacklistDataRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlacklistData extends TableImpl<BlacklistDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.blacklist_data</code>
     */
    public static final BlacklistData BLACKLIST_DATA = new BlacklistData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlacklistDataRecord> getRecordType() {
        return BlacklistDataRecord.class;
    }

    /**
     * The column <code>public.blacklist_data.guild_id</code>.
     */
    public final TableField<BlacklistDataRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.blacklist_data.reason</code>.
     */
    public final TableField<BlacklistDataRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.CLOB.nullable(false), this, "");

    private BlacklistData(Name alias, Table<BlacklistDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlacklistData(Name alias, Table<BlacklistDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.blacklist_data</code> table reference
     */
    public BlacklistData(String alias) {
        this(DSL.name(alias), BLACKLIST_DATA);
    }

    /**
     * Create an aliased <code>public.blacklist_data</code> table reference
     */
    public BlacklistData(Name alias) {
        this(alias, BLACKLIST_DATA);
    }

    /**
     * Create a <code>public.blacklist_data</code> table reference
     */
    public BlacklistData() {
        this(DSL.name("blacklist_data"), null);
    }

    public <O extends Record> BlacklistData(Table<O> child, ForeignKey<O, BlacklistDataRecord> key) {
        super(child, key, BLACKLIST_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BlacklistDataRecord> getPrimaryKey() {
        return Keys.BLACKLIST_DATA_PKEY;
    }

    @Override
    public BlacklistData as(String alias) {
        return new BlacklistData(DSL.name(alias), this);
    }

    @Override
    public BlacklistData as(Name alias) {
        return new BlacklistData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlacklistData rename(String name) {
        return new BlacklistData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlacklistData rename(Name name) {
        return new BlacklistData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
